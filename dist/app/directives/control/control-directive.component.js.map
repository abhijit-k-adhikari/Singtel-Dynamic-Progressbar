{"version":3,"sources":["app/directives/control/control-directive.component.ts"],"names":[],"mappings":"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","file":"control-directive.component.js","sourcesContent":["import { Component, ViewChild, AfterViewInit, Input, SimpleChanges } from \"@angular/core\";\r\n\r\nimport { Progress } from \"app/directives/progressbar/progress.directive\";\r\nimport { Bar } from \"app/directives/progressbar/bar.component\";\r\nimport { Progressbar } from \"app/directives/progressbar/progressbar.component\";\r\nimport { jqxDropDownListComponent } from \"app/external/ts/jqx-dropdownlist/angular_jqxdropdownlist\";\r\n\r\n@Component({\r\n    selector: \"my-progressbar\",\r\n    templateUrl: \"app/directives/control/control-directive.component.html\",\r\n    styleUrls: [\"app/directives/control/control-directive.component.css\"]\r\n})\r\n\r\nexport class ControlComponent implements OnAfterViewInit, OnChanges {\r\n\r\n    public selectedProgressbar: any;\r\n    public _genratedEndPointStr: string;\r\n    public progressBars: any = [];\r\n    public progressbarCount: number = 0;\r\n    public buttons: any = [];\r\n\r\n    public dropdownlistSource: any = [];\r\n    public dropdownlistSettings: jqwidgets.DropDownListOptions =\r\n    {\r\n        source: this.dropdownlistSource, selectedIndex: 0, width: \"200\", height: \"25\", displayMember: \"name\"\r\n    };\r\n\r\n    public jsonObject: any = {};\r\n\r\n    @Input() public endPoint: any = {};\r\n    @ViewChild(\"progressbarDDL\") private progressbarDDL: jqxDropDownListComponent;\r\n\r\n    constructor() {\r\n        this._genratedEndPointStr = \"Please create a end-point first by going to tab : Setup EndPoint -> Enter the values (alternatively click Reset) -> Click the Generate Progressbar button\";\r\n    }\r\n\r\n    private ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes[\"endPoint\"] && changes[\"endPoint\"].currentValue) {\r\n            this.jsonObject = this.endPoint;\r\n            this._genratedEndPointStr = JSON.stringify(this.endPoint);\r\n            this.loadScreen();\r\n        }\r\n    }\r\n\r\n    private loadScreen() {\r\n\r\n        if (this.jsonObject) {\r\n\r\n            this.progressbarCount = this.jsonObject.bars.length;\r\n\r\n            this.dropdownlistSource = [];\r\n            this.jsonObject.bars.forEach((element, index) => {\r\n                this.dropdownlistSource.push({ name: \"ProgressBar \" + (index + 1) });\r\n            });\r\n\r\n            let limit = +this.jsonObject.limit;\r\n            this.progressBars = [];\r\n            this.jsonObject.bars.forEach((val, index) => {\r\n                this.progressBars.push({\r\n                    name: \"ProgressBar \" + (index + 1),\r\n                    currentValue: +val,\r\n                    maxValue: +limit,\r\n                    percetageValue: Math.floor((+val / +limit * 100)),\r\n                    progressbarType: this.getTypeValue(+val, +limit, Math.floor((+val / +limit * 100)))\r\n                });\r\n            });\r\n\r\n            this.buttons = [];\r\n            this.jsonObject.buttons.forEach((jumpValue) => {\r\n                this.buttons.push({ content: +jumpValue });\r\n            });\r\n\r\n            this.selectedProgressbar = this.progressBars[0].name;\r\n            this.dropdownlistSettings = { source: this.dropdownlistSource, selectedIndex: 0, width: \"200\", height: \"25\", displayMember: \"name\" };\r\n            this.progressbarDDL.createComponent(this.dropdownlistSettings);\r\n        }\r\n\r\n    }\r\n\r\n    private ngAfterViewInit(): void {\r\n        this.progressbarDDL.createComponent(this.dropdownlistSettings);\r\n    }\r\n\r\n    private getTypeValue(currentVal: number, maxValue: number, percetageValue: number): string {\r\n        let type: string;\r\n        if (currentVal == 0) {\r\n            type = \"warning\";\r\n        } else if (currentVal == maxValue) {\r\n            type = \"danger\";\r\n        } else if (percetageValue < 50) {\r\n            type = \"warning\";\r\n        } else {\r\n            type = \"success\";\r\n        }\r\n        return type;\r\n    }\r\n\r\n    private generateNewProgressValues(val: number) {\r\n        this.progressBars.forEach((element) => {\r\n            if (element.name == this.selectedProgressbar) {\r\n                let value = element.currentValue + val;\r\n                if (value < 0) {\r\n                    value = 0;\r\n                }\r\n                if (value > element.maxValue) {\r\n                    value = element.maxValue;\r\n                }\r\n                element.currentValue = value;\r\n                element.percetageValue = Math.floor((value / element.maxValue * 100));\r\n                element.progressbarType = this.getTypeValue(value, element.maxValue, element.percetageValue);\r\n            }\r\n        });\r\n    };\r\n\r\n    private onChangeEvent(e: any): void {\r\n        let item = this.progressbarDDL.getSelectedItem();\r\n        this.selectedProgressbar = item.originalItem.name;\r\n    }\r\n}\r\n"]}